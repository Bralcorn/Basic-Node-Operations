Questions

1. What is the difference between readdirSync and readdir?

The difference between the two is that readdirSync is synchronous, meaning it waits 
for it to finish, and readdir is asynchrnous, meaning the function will keep going without
waiting.

2. What is the event loop and how does it handle asynchronous requests?

  The event loop processes events that are waiting in the event queue, if the event is 
  asynchrounus, the event loop lets the operating system tell it when the event is done 
  processing, meanwhile it continues to process other events in the queue.

3. Given the following code, specify whether the program is asynchronous and non-blocking 
or synchronous and blocking or synchronous and non-blocking.

const fs = require('fs');
const file = fs.readFileSync('foo.txt');
console.log(file.toString());

  This is synchronous and blocking, because it accesses files on disk, making it slow, 
  and it is synchronous.

4.  Given the following code, specify whether the program is asynchronous and non-blocking 
or synchronous and blocking or synchronous and non-blocking.

const fs = require('fs');
fs.readFile('foo.txt', (err, file) => {
 if (err) throw err;
 console.log(file.toString());
});
console.log("test");

  This code would be asynchronous and non-blocking.

5. In what order will the console.log statements execute in the code below?

const fs = require('fs');
fs.readFile('foo.txt', (err, file) => {
  if (err) throw err;
  console.log("A");
  console.log("B")
});
console.log("C");

  The readfile function is slow, so most likely "C" will execute first, then "A", followed
  by "B".

6. "setTimeout" is a JavaScript function which calls a function after a set amount of 
milliseconds. Given the following code, explain in what sequence the functions will run 
and why.

function greeting() {
  setTimeout(() => {
    console.log("friend");
 }, 100);
}
function hello(){
  console.log("hello");
}
greeting();
hello();

  What would happen is that the hello() function would run first, since setTimeout is
  asynchronous, and after 100 milliseconds, the console would "friend" would be outputed 
  to the console.

7. Create a function which utilizes a callback. Make sure to add console.log statements 
to understand when your callback function is called.

  function finishedWork(name, callback) {
    console.log(name + ", your shift is over!");
    callback();
  }

  finishedWork("Ron", () => console.log("Have a good day!"));














